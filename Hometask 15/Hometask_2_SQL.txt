1. Создать таблицы с данными согласно спроектированной схеме. Заполнить предоставленными данными.

INSERT INTO actors(name, surname, age, sex)
VALUES
("Arnold", "Schwarzenegger", 75, "m"),
("Bruce", "Willis", 67, "m"),
("Tom", "Cruise", 60, "m"),
("Brad", "Pitt", 53, "m"),
("Will", "Smith", 54, "m"),
("Leonardo", "DiCaprio", 48, "m"),
("Tom", "Hanks", 66, "m"),
("Johnny", "Depp", 59, "m"),
("Harrison", "Ford", 80, "m"),
("Sandra", "Bullock", 58, "f"),
("Halle", "Berry", 56, "f"),
("Julia", "Roberts", 55, "f"),
("Kate", "Winslet", 47, "f"),
("Angelina", "Jolie", 47, "f")

INSERT INTO directors(name, surname, age, sex)
VALUES
("James", "Cameron", 68, "m"),
("Steven", "Spilberg", 75, "m"),
("Robert", "Zemeckis", 70, "m"),
("Doug", "Liman", 57, "m"),
("Brian", "De Palma", 82, "m"),
("John", "Woo", 76, "m"),
("Tim", "Berton", 64, "m"),
("Jan", "De Bont", 79, "m"),
("Alejandro", "Agresti", 61, "m"),
("Garry", "Marshal", 82, "m"),
("Steven", "Sodeberg", 59, "m"),
("Michael", "Bay", 57, "m"),
("Barry ", "Sonnenfeld", 69, "m"),
("Simon", "Kinberg", 49, "m"),
("Christopher", "Nolan", 52, "m"),
("Martin", "Scorsese", 80, "m"),
("Stanley", "Kubrick", 70, "m"),
("Woody", "Allen", 87, "m")

INSERT INTO movies(name_movie, release, budjet, director_id)
VALUES
("Titanic", 1997, 200000000, 1),
("Catch me if you can",	2002, 52000000, 2),
("Forrest Gump", 1994, 55000000, 3),
("Terminator 2", 1991, 102000000, 1),
("Mr. & Mrs. Smith", 2005, 110000000, 4),
("Indiana Jones 3", 1989, 48000000, 2),
("Mission impossible 1", 1996, 80000000, 5),
("Mission impossible 2", 2000, 125000000, 6),
("Charlie and the Chocolate Factory", 2005,	150000000, 7),
("Speed", 1994,	25000000, 8),
("Lake House", 2006, 40000000, 9),
("Pretty women", 1990, 190000000, 10),
("Ocean’s eleven", 2001, 184000000, 11),
("Larry Crowne", 2011, 30000000, NULL),
("Bad boys 1", 1995, 19000000, 12),
("Bad boys 2", 2003, 130000000, 12),
("Men in black", 1997, 90000000, 13),
("The Martian", 2015, 108000000, 14),
("Interstellar", 2014, 165000000, 15)

INSERT INTO bank_accounts(director_id, actors_id, account_number)
VALUES
(NULL, 1, 1264567),
(NULL, 2, 1296567),
(NULL, 3, 1234567),
(NULL, 4, 1294167),
(NULL, 5, 1594567),
(NULL, 6, 1794567),
(NULL, 7, 1994567),
(NULL, 8, 2294567),
(NULL, 9, 1294567),
(NULL, 10, 2297667),
(NULL, 11, 3994567),
(NULL, 12, 4294567),
(NULL, 13, 5294567),
(NULL, 14, 6294567),
(1, NULL, 7294567),
(2,	NULL, 8294567),
(3,	NULL, 9294567),
(4,	NULL, 1294561),
(5,	NULL, 1294562),
(6,	NULL, 1294563),
(7,	NULL, 1294564),
(8,	NULL, 1294565),
(9, NULL, 1294566),
(10, NULL, 1294567),
(11, NULL, 1294568),
(12, NULL, 1294569),
(13, NULL, 1294521),
(14, NULL, 1294537),
(15, NULL, 1294547),
(16, NULL, 1294557),
(17, NULL, 1294557),
(18, NULL, 1294577)

INSERT INTO actors_movies(movies_id, actors_id)
VALUES
(1, 6),
(1,	13),
(2,	6),
(2,	7),
(3,	7),
(4,	1),
(5,	4),
(5,	14),
(6,	9),
(7,	3),
(8,	3),
(9,	8),
(10, 10),
(11, 10),
(12, 12),
(13, 4),
(13, 12),
(14, 7),
(14, 12),
(15, 5),
(16, 5),
(17, 5),
(18, NULL),
(19, NULL)

2. Добавить новое поле finance INTEGER в таблицу bank_accounts значение задать NULL.

ALTER TABLE bank_accounts 
ADD COLUMN "finance" INTEGER NULL

3. Вывести первых 10  режиссёров, которые сняли высокобюджетные фильмы. Режиссёры не должны повторяться.

SELECT DISTINCT(directors.name), directors.surname, movies.budjet
FROM directors
INNER JOIN movies ON directors.director_id == movies.director_id
LIMIT 10

4. Вывести актёров и режиссёров, которые не участвовали не в одном из фильмов.

SELECT directors.name, directors.surname, movies.name_movie
FROM directors
LEFT JOIN movies ON directors.director_id == movies.director_id
WHERE movies.name_movie is NULL

SELECT actors.name, actors.surname, movies.name_movie
FROM actors
LEFT JOIN actors_movies on actors_movies.actors_id == actors.actors_id
LEFT JOIN movies on movies.movie_id == actors_movies.movies_id
WHERE movies.name_movie is NULL

5. Вывести все фильмы, а так же всех актёров кассовые сборы которых превысили 150000000.

SELECT actors.name, actors.surname, movies.name_movie
FROM actors
INNER JOIN actors_movies on actors_movies.actors_id == actors.actors_id
INNER JOIN movies on movies.movie_id == actors_movies.movies_id
WHERE movies.budjet >= 150000000

6. Вывести всех режиссёров которые снимали фильмы до 2000 года. Режиссёры не должны повторятся

SELECT DISTINCT(directors.name), directors.surname
FROM directors
INNER JOIN movies ON directors.director_id == movies.director_id
WHERE movies.release <= 2000

7. Добавить фильмы для актёров и режиссёров, у которых нет зависимости в таблице movies. 
Не забыть сделать изменения в таблице actors_movies.

INSERT INTO movies(name_movie, release, budjet, director_id)
VALUES
("The Irishman", 2019, 159000000, 16),
("The Shining",	1980, 19000000, 17),
("Midnight in Paris", 2011, 17000000, 18)

INSERT INTO movies(name_movie, release, budjet)
VALUES
("The Last Boy Scout", 1991, 43000000)

INSERT INTO actors_movies(movies_id, actors_id)
VALUES
(23, 2),
(23, 11)

8. Добавить колонку rating к фильмам. Задать значения рейтинга фильмов.

ALTER TABLE movies ADD COLUMN "rating" REAL

UPDATE movies SET rating = 6.0
WHERE movie_id = 1
UPDATE movies SET rating = 6.1
WHERE movie_id = 2
UPDATE movies SET rating = 6.2
WHERE movie_id = 3
UPDATE movies SET rating = 6.3
WHERE movie_id = 4
UPDATE movies SET rating = 6.4
WHERE movie_id = 5
UPDATE movies SET rating = 6.5
WHERE movie_id = 6
UPDATE movies SET rating = 6.6
WHERE movie_id = 7
UPDATE movies SET rating = 6.7
WHERE movie_id = 8
UPDATE movies SET rating = 6.8
WHERE movie_id = 9
UPDATE movies SET rating = 6.9
WHERE movie_id = 10
UPDATE movies SET rating = 7.0
WHERE movie_id = 11
UPDATE movies SET rating = 7.1
WHERE movie_id = 12
UPDATE movies SET rating = 7.2
WHERE movie_id = 13
UPDATE movies SET rating = 7.3
WHERE movie_id = 14
UPDATE movies SET rating = 7.4
WHERE movie_id = 15
UPDATE movies SET rating = 7.5
WHERE movie_id = 16
UPDATE movies SET rating = 7.6
WHERE movie_id = 17
UPDATE movies SET rating = 7.7
WHERE movie_id = 18
UPDATE movies SET rating = 7.8
WHERE movie_id = 19
UPDATE movies SET rating = 7.9
WHERE movie_id = 20
UPDATE movies SET rating = 8.0
WHERE movie_id = 21
UPDATE movies SET rating = 8.1
WHERE movie_id = 22
UPDATE movies SET rating = 8.2
WHERE movie_id = 23

9. Вывести режиссёров и фильмы с рейтингом ниже среднего до 2000 года

SELECT avg(rating)
FROM movies

SELECT directors.name, directors.surname, movies.name_movie
FROM directors
INNER JOIN movies ON directors.director_id == movies.director_id
WHERE movies.rating < 7.1 AND movies.release < 2000

10. Вывести всех актёров, которые знакомы с 2-мя и более другими актёрами.

SELECT actors.name, actors.surname, COUNT(DISTINCT actors_2.actors_id)
FROM actors_movies, actors_movies actors_movies_2, actors, actors actors_2
WHERE
actors_movies.movies_id = actors_movies_2.movies_id 
AND actors_movies.actors_id != actors_movies_2.actors_id
AND actors_movies.actors_id = actors.actors_id
AND actors_movies_2.actors_id = actors_2.actors_id
GROUP BY actors.actors_id, actors.name, actors.surname
HAVING COUNT(DISTINCT actors_2.actors_id) >= 2
